AWSTemplateFormatVersion: 2010-09-09
Description: 'EKS cluster Stack'

Parameters:
  ControlPlaneSecurityGroup:
    Description: Security Group for the Control Plane
    Type: 'List<AWS::EC2::SecurityGroup::Id>'
  SubnetsList:
    Type: 'List<AWS::EC2::Subnet::Id>'
    Description: List of Subnets Ids of the VPC to which EKS Cluster will be created
  EKSServiceRoleArn:
    Type: String
    Description: EKS service Role ARN
  EKSKubernetesVersion:
    Type: String
    Description: EKS Kubernetes Version
    Default: '1.25'
  EKSClusterName:
    Type: String
    Description: EKS Cluster name
    Default: GadgetsOnline

Resources:
  ControlPlane:
    Type: 'AWS::EKS::Cluster'
    Properties:
      KubernetesNetworkConfig: {}
      Name: !Ref EKSClusterName
      ResourcesVpcConfig:
        EndpointPrivateAccess: false
        EndpointPublicAccess: true
        SecurityGroupIds: !Ref ControlPlaneSecurityGroup
        SubnetIds: !Ref SubnetsList
      RoleArn: !Ref EKSServiceRoleArn
      AccessConfig:
        AuthenticationMode: API_AND_CONFIG_MAP
        BootstrapClusterCreatorAdminPermissions: true
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}/ControlPlane'
      Version: !Ref EKSKubernetesVersion

  KarpenterControllerPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: !Sub "KarpenterControllerPolicy-${AWS::Region}-${ControlPlane}"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Resource: "*"
            Action:
              - ec2:CreateFleet
              - ec2:CreateLaunchTemplate
              - ec2:CreateTags
              - ec2:DeleteLaunchTemplate
              - ec2:RunInstances
              - ec2:TerminateInstances
              - ec2:DescribeAvailabilityZones
              - ec2:DescribeImages
              - ec2:DescribeInstances
              - ec2:DescribeInstanceTypeOfferings
              - ec2:DescribeInstanceTypes
              - ec2:DescribeLaunchTemplates
              - ec2:DescribeSecurityGroups
              - ec2:DescribeSpotPriceHistory
              - ec2:DescribeSubnets
              - pricing:GetProducts
              - ssm:GetParameter
              - sqs:DeleteMessage
              - sqs:GetQueueAttributes
              - sqs:GetQueueUrl
              - sqs:ReceiveMessage
          - Effect: Allow
            Action:
              - iam:PassRole
            Resource: !Sub "arn:${AWS::Partition}:iam::${AWS::AccountId}:role/KarpenterNodeRole-${ControlPlane}"
          - Effect: Allow
            Action:
              - eks:DescribeCluster
            Resource: !Sub "arn:${AWS::Partition}:eks:${AWS::Region}:${AWS::AccountId}:cluster/${ControlPlane}"

  KarpenterNodeRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: !Sub "KarpenterNodeRole-${ControlPlane}"
      Path: /
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy
        - arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore

  KarpenterNodeInstanceProfile:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      InstanceProfileName: !Sub "KarpenterNodeInstanceProfile-${ControlPlane}"
      Path: "/"
      Roles:
        - !Ref KarpenterNodeRole

  KarpenterInterruptionQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Ref ControlPlane
      MessageRetentionPeriod: 300

Outputs:
  ARN:
    Value: !GetAtt 
      - ControlPlane
      - Arn
    Export:
      Name: !Sub '${AWS::StackName}::ARN'
  CertificateAuthorityData:
    Value: !GetAtt 
      - ControlPlane
      - CertificateAuthorityData
  ClusterSecurityGroupId:
    Value: !GetAtt 
      - ControlPlane
      - ClusterSecurityGroupId
    Export:
      Name: !Sub '${AWS::StackName}::ClusterSecurityGroupId'
  ClusterStackName:
    Value: !Ref ControlPlane
  Endpoint:
    Value: !GetAtt 
      - ControlPlane
      - Endpoint
    Export:
      Name: !Sub '${AWS::StackName}::Endpoint'
