AWSTemplateFormatVersion: 2010-09-09
Description: 'EKS cluster Stack'

Parameters:
  ControlPlaneSecurityGroup:
    Description: Security Group for the Control Plane
    Type: 'List<AWS::EC2::SecurityGroup::Id>'
  SubnetsList:
    Type: 'List<AWS::EC2::Subnet::Id>'
    Description: List of Subnets Ids of the VPC to which EKS Cluster will be created
  EKSServiceRoleArn:
    Type: String
    Description: EKS service Role ARN
  EKSKubernetesVersion:
    Type: String
    Description: EKS Kubernetes Version
    Default: '1.32'
  EKSClusterName:
    Type: String
    Description: EKS Cluster name
    Default: GadgetsOnline

Resources:
  ControlPlane:
    Type: 'AWS::EKS::Cluster'
    Properties:
      KubernetesNetworkConfig: {}
      Name: !Ref EKSClusterName
      ResourcesVpcConfig:
        EndpointPrivateAccess: false
        EndpointPublicAccess: true
        SecurityGroupIds: !Ref ControlPlaneSecurityGroup
        SubnetIds: !Ref SubnetsList
      RoleArn: !Ref EKSServiceRoleArn
      AccessConfig:
        AuthenticationMode: API_AND_CONFIG_MAP
        BootstrapClusterCreatorAdminPermissions: true
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}/ControlPlane'
      Version: !Ref EKSKubernetesVersion

  # Pod Identity Roles
  AWSLoadBalancerControllerRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${ControlPlane}-aws-load-balancer-controller"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: pods.eks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/ElasticLoadBalancingFullAccess
      Policies:
        - PolicyName: AWSLoadBalancerControllerIAMPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - iam:CreateServiceLinkedRole
                  - ec2:DescribeAccountAttributes
                  - ec2:DescribeAddresses
                  - ec2:DescribeAvailabilityZones
                  - ec2:DescribeInternetGateways
                  - ec2:DescribeVpcs
                  - ec2:DescribeVpcPeeringConnections
                  - ec2:DescribeSubnets
                  - ec2:DescribeSecurityGroups
                  - ec2:DescribeInstances
                  - ec2:DescribeNetworkInterfaces
                  - ec2:DescribeTags
                  - ec2:GetCoipPoolUsage
                  - ec2:GetManagedPrefixListEntries
                  - ec2:DescribeCoipPools
                  - elasticloadbalancing:DescribeLoadBalancers
                  - elasticloadbalancing:DescribeLoadBalancerAttributes
                  - elasticloadbalancing:DescribeListeners
                  - elasticloadbalancing:DescribeListenerCertificates
                  - elasticloadbalancing:DescribeSSLPolicies
                  - elasticloadbalancing:DescribeRules
                  - elasticloadbalancing:DescribeTargetGroups
                  - elasticloadbalancing:DescribeTargetGroupAttributes
                  - elasticloadbalancing:DescribeTargetHealth
                  - elasticloadbalancing:DescribeTags
                Resource: "*"
              - Effect: Allow
                Action:
                  - cognito-idp:DescribeUserPoolClient
                  - acm:ListCertificates
                  - acm:DescribeCertificate
                  - iam:ListServerCertificates
                  - iam:GetServerCertificate
                  - waf-regional:GetWebACL
                  - waf-regional:GetWebACLForResource
                  - waf-regional:AssociateWebACL
                  - waf-regional:DisassociateWebACL
                  - wafv2:GetWebACL
                  - wafv2:GetWebACLForResource
                  - wafv2:AssociateWebACL
                  - wafv2:DisassociateWebACL
                  - shield:DescribeProtection
                  - shield:CreateProtection
                  - shield:DeleteProtection
                Resource: "*"
              - Effect: Allow
                Action:
                  - ec2:AuthorizeSecurityGroupIngress
                  - ec2:RevokeSecurityGroupIngress
                  - ec2:CreateSecurityGroup
                Resource: "*"
              - Effect: Allow
                Action:
                  - ec2:CreateTags
                Resource: arn:aws:ec2:*:*:security-group/*
                Condition:
                  StringEquals:
                    "ec2:CreateAction": "CreateSecurityGroup"
                  "Null":
                    "aws:RequestTag/elbv2.k8s.aws/cluster": "false"
              - Effect: Allow
                Action:
                  - elasticloadbalancing:CreateLoadBalancer
                  - elasticloadbalancing:CreateTargetGroup
                Resource: "*"
                Condition:
                  "Null":
                    "aws:RequestTag/elbv2.k8s.aws/cluster": "false"
              - Effect: Allow
                Action:
                  - elasticloadbalancing:CreateListener
                  - elasticloadbalancing:DeleteListener
                  - elasticloadbalancing:CreateRule
                  - elasticloadbalancing:DeleteRule
                Resource: "*"
              - Effect: Allow
                Action:
                  - elasticloadbalancing:AddTags
                  - elasticloadbalancing:RemoveTags
                Resource:
                  - arn:aws:elasticloadbalancing:*:*:targetgroup/*/*
                  - arn:aws:elasticloadbalancing:*:*:loadbalancer/net/*/*
                  - arn:aws:elasticloadbalancing:*:*:loadbalancer/app/*/*
                Condition:
                  "Null":
                    "aws:RequestTag/elbv2.k8s.aws/cluster": "true"
                    "aws:ResourceTag/elbv2.k8s.aws/cluster": "false"
              - Effect: Allow
                Action:
                  - elasticloadbalancing:AddTags
                  - elasticloadbalancing:RemoveTags
                Resource:
                  - arn:aws:elasticloadbalancing:*:*:listener/net/*/*/*
                  - arn:aws:elasticloadbalancing:*:*:listener/app/*/*/*
                  - arn:aws:elasticloadbalancing:*:*:listener-rule/net/*/*/*
                  - arn:aws:elasticloadbalancing:*:*:listener-rule/app/*/*/*
              - Effect: Allow
                Action:
                  - elasticloadbalancing:ModifyLoadBalancerAttributes
                  - elasticloadbalancing:SetIpAddressType
                  - elasticloadbalancing:SetSecurityGroups
                  - elasticloadbalancing:SetSubnets
                  - elasticloadbalancing:DeleteLoadBalancer
                  - elasticloadbalancing:ModifyTargetGroup
                  - elasticloadbalancing:ModifyTargetGroupAttributes
                  - elasticloadbalancing:DeleteTargetGroup
                Resource: "*"
                Condition:
                  "Null":
                    "aws:ResourceTag/elbv2.k8s.aws/cluster": "false"
              - Effect: Allow
                Action:
                  - elasticloadbalancing:RegisterTargets
                  - elasticloadbalancing:DeregisterTargets
                Resource: arn:aws:elasticloadbalancing:*:*:targetgroup/*/*
              - Effect: Allow
                Action:
                  - elasticloadbalancing:SetWebAcl
                  - elasticloadbalancing:ModifyListener
                  - elasticloadbalancing:AddListenerCertificates
                  - elasticloadbalancing:RemoveListenerCertificates
                  - elasticloadbalancing:ModifyRule
                Resource: "*"

  EBSCSIDriverRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${ControlPlane}-ebs-csi-driver"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: pods.eks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEBSCSIDriverPolicy

  KarpenterControllerRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${ControlPlane}-karpenter"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: pods.eks.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: KarpenterControllerPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Resource: "*"
                Action:
                  - ec2:CreateFleet
                  - ec2:CreateLaunchTemplate
                  - ec2:CreateTags
                  - ec2:DeleteLaunchTemplate
                  - ec2:RunInstances
                  - ec2:TerminateInstances
                  - ec2:DescribeAvailabilityZones
                  - ec2:DescribeImages
                  - ec2:DescribeInstances
                  - ec2:DescribeInstanceTypeOfferings
                  - ec2:DescribeInstanceTypes
                  - ec2:DescribeLaunchTemplates
                  - ec2:DescribeSecurityGroups
                  - ec2:DescribeSpotPriceHistory
                  - ec2:DescribeSubnets
                  - pricing:GetProducts
                  - ssm:GetParameter
              - Effect: Allow
                Action:
                  - sqs:DeleteMessage
                  - sqs:GetQueueAttributes
                  - sqs:GetQueueUrl
                  - sqs:ReceiveMessage
                Resource: !Sub "arn:${AWS::Partition}:sqs:${AWS::Region}:${AWS::AccountId}:${ControlPlane}-karpenter"
              - Effect: Allow
                Action:
                  - iam:PassRole
                Resource: !Sub "arn:${AWS::Partition}:iam::${AWS::AccountId}:role/KarpenterNodeRole-*"
              - Effect: Allow
                Action:
                  - eks:DescribeCluster
                Resource: !Sub "arn:${AWS::Partition}:eks:${AWS::Region}:${AWS::AccountId}:cluster/${ControlPlane}"

  # Pod Identity Associations
  AWSLoadBalancerControllerPodIdentity:
    Type: AWS::EKS::PodIdentityAssociation
    Properties:
      ClusterName: !Ref ControlPlane
      Namespace: kube-system
      ServiceAccount: aws-load-balancer-controller
      RoleArn: !GetAtt AWSLoadBalancerControllerRole.Arn

  EBSCSIDriverPodIdentity:
    Type: AWS::EKS::PodIdentityAssociation
    Properties:
      ClusterName: !Ref ControlPlane
      Namespace: kube-system
      ServiceAccount: ebs-csi-controller-sa
      RoleArn: !GetAtt EBSCSIDriverRole.Arn

  KarpenterPodIdentity:
    Type: AWS::EKS::PodIdentityAssociation
    Properties:
      ClusterName: !Ref ControlPlane
      Namespace: karpenter
      ServiceAccount: karpenter
      RoleArn: !GetAtt KarpenterControllerRole.Arn

  # EKS Addons
  CoreDNSAddon:
    Type: AWS::EKS::Addon
    Properties:
      ClusterName: !Ref ControlPlane
      AddonName: coredns
      ResolveConflicts: OVERWRITE

  KubeProxyAddon:
    Type: AWS::EKS::Addon
    Properties:
      ClusterName: !Ref ControlPlane
      AddonName: kube-proxy
      ResolveConflicts: OVERWRITE

  VPCCNIAddon:
    Type: AWS::EKS::Addon
    Properties:
      ClusterName: !Ref ControlPlane
      AddonName: vpc-cni
      ResolveConflicts: OVERWRITE

  EBSCSIAddon:
    Type: AWS::EKS::Addon
    DependsOn: EBSCSIDriverPodIdentity
    Properties:
      ClusterName: !Ref ControlPlane
      AddonName: aws-ebs-csi-driver
      ServiceAccountRoleArn: !GetAtt EBSCSIDriverRole.Arn
      ResolveConflicts: OVERWRITE

  PodIdentityAddon:
    Type: AWS::EKS::Addon
    Properties:
      ClusterName: !Ref ControlPlane
      AddonName: eks-pod-identity-agent
      ResolveConflicts: OVERWRITE

  KarpenterAddon:
    Type: AWS::EKS::Addon
    DependsOn: KarpenterPodIdentity
    Properties:
      ClusterName: !Ref ControlPlane
      AddonName: karpenter
      ServiceAccountRoleArn: !GetAtt KarpenterControllerRole.Arn
      ResolveConflicts: OVERWRITE

Outputs:
  ClusterName:
    Description: EKS Cluster Name
    Value: !Ref ControlPlane
    Export:
      Name: !Sub '${AWS::StackName}-ClusterName'

  ClusterEndpoint:
    Description: EKS Cluster Endpoint
    Value: !GetAtt ControlPlane.Endpoint
    Export:
      Name: !Sub '${AWS::StackName}-ClusterEndpoint'

  ClusterSecurityGroupId:
    Description: Security Group ID for the EKS cluster
    Value: !GetAtt ControlPlane.ClusterSecurityGroupId
    Export:
      Name: !Sub '${AWS::StackName}-ClusterSecurityGroupId'

  ClusterStackName:
    Description: EKS Cluster Stack Name
    Value: !Ref ControlPlane
    Export:
      Name: !Sub '${AWS::StackName}-ClusterStackName'