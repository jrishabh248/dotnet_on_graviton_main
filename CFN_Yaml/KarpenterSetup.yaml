AWSTemplateFormatVersion: '2010-09-09'
Description: 'Karpenter Setup for EKS Cluster'

Parameters:
  EKSClusterName:
    Type: String
    Description: Name of the EKS cluster
  VPCId:
    Type: String
    Description: VPC ID where EKS cluster is deployed
  PrivateSubnets:
    Type: CommaDelimitedList
    Description: Private subnet IDs for Karpenter nodes
  ClusterSecurityGroupId:
    Type: String
    Description: EKS cluster security group ID
  KarpenterControllerRoleArn:
    Type: String
    Description: Karpenter controller IAM role ARN
  KarpenterNodeInstanceRoleArn:
    Type: String
    Description: Karpenter node instance role ARN

Resources:
  # Lambda function to install Karpenter
  KarpenterInstallFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${AWS::StackName}-KarpenterInstaller'
      Runtime: python3.9
      Handler: index.handler
      Role: !GetAtt KarpenterInstallRole.Arn
      Timeout: 900
      Code:
        ZipFile: |
          import boto3
          import json
          import subprocess
          import os
          import cfnresponse
          
          def handler(event, context):
              try:
                  if event['RequestType'] == 'Create':
                      cluster_name = event['ResourceProperties']['ClusterName']
                      region = event['ResourceProperties']['Region']
                      controller_role_arn = event['ResourceProperties']['ControllerRoleArn']
                      
                      # Install kubectl and helm
                      subprocess.run(['curl', '-LO', 'https://dl.k8s.io/release/v1.28.0/bin/linux/amd64/kubectl'], check=True)
                      subprocess.run(['chmod', '+x', 'kubectl'], check=True)
                      subprocess.run(['mv', 'kubectl', '/tmp/kubectl'], check=True)
                      
                      subprocess.run(['curl', 'https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3', '|', 'bash'], shell=True, check=True)
                      
                      # Update kubeconfig
                      os.environ['AWS_DEFAULT_REGION'] = region
                      subprocess.run(['/tmp/kubectl', 'config', 'set-cluster', cluster_name, '--server', f'https://{cluster_name}.{region}.eks.amazonaws.com'], check=True)
                      
                      # Create karpenter namespace
                      subprocess.run(['/tmp/kubectl', 'create', 'namespace', 'karpenter', '--dry-run=client', '-o', 'yaml', '|', '/tmp/kubectl', 'apply', '-f', '-'], shell=True, check=True)
                      
                      # Create service account
                      sa_yaml = f"""
          apiVersion: v1
          kind: ServiceAccount
          metadata:
            name: karpenter
            namespace: karpenter
            annotations:
              eks.amazonaws.com/role-arn: {controller_role_arn}
          """
                      with open('/tmp/sa.yaml', 'w') as f:
                          f.write(sa_yaml)
                      subprocess.run(['/tmp/kubectl', 'apply', '-f', '/tmp/sa.yaml'], check=True)
                      
                      # Install Karpenter using Helm
                      subprocess.run(['helm', 'upgrade', '--install', 'karpenter', 'oci://public.ecr.aws/karpenter/karpenter', 
                                    '--version', '0.37.0', '--namespace', 'karpenter', 
                                    '--set', f'settings.clusterName={cluster_name}',
                                    '--set', f'serviceAccount.annotations.eks\\.amazonaws\\.com/role-arn={controller_role_arn}',
                                    '--wait'], check=True)
                      
                      cfnresponse.send(event, context, cfnresponse.SUCCESS, {'Status': 'Karpenter installed successfully'})
                  else:
                      cfnresponse.send(event, context, cfnresponse.SUCCESS, {'Status': 'No action required'})
              except Exception as e:
                  print(f"Error: {str(e)}")
                  cfnresponse.send(event, context, cfnresponse.FAILED, {'Error': str(e)})

  KarpenterInstallRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: KarpenterInstallPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - eks:DescribeCluster
                  - eks:ListClusters
                  - iam:GetRole
                  - iam:PassRole
                Resource: '*'

  # Custom resource to trigger Karpenter installation
  KarpenterInstall:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt KarpenterInstallFunction.Arn
      ClusterName: !Ref EKSClusterName
      Region: !Ref AWS::Region
      ControllerRoleArn: !Ref KarpenterControllerRoleArn

  # Tag subnets for Karpenter discovery
  SubnetTagger:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${AWS::StackName}-SubnetTagger'
      Runtime: python3.9
      Handler: index.handler
      Role: !GetAtt SubnetTaggerRole.Arn
      Code:
        ZipFile: |
          import boto3
          import cfnresponse
          
          def handler(event, context):
              try:
                  if event['RequestType'] == 'Create':
                      ec2 = boto3.client('ec2')
                      cluster_name = event['ResourceProperties']['ClusterName']
                      subnets = event['ResourceProperties']['Subnets']
                      security_group = event['ResourceProperties']['SecurityGroup']
                      
                      # Tag subnets
                      for subnet in subnets:
                          ec2.create_tags(
                              Resources=[subnet],
                              Tags=[{'Key': 'karpenter.sh/discovery', 'Value': cluster_name}]
                          )
                      
                      # Tag security group
                      ec2.create_tags(
                          Resources=[security_group],
                          Tags=[{'Key': 'karpenter.sh/discovery', 'Value': cluster_name}]
                      )
                      
                      cfnresponse.send(event, context, cfnresponse.SUCCESS, {'Status': 'Tags applied successfully'})
                  else:
                      cfnresponse.send(event, context, cfnresponse.SUCCESS, {'Status': 'No action required'})
              except Exception as e:
                  cfnresponse.send(event, context, cfnresponse.FAILED, {'Error': str(e)})

  SubnetTaggerRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: EC2TaggingPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ec2:CreateTags
                  - ec2:DescribeSubnets
                  - ec2:DescribeSecurityGroups
                Resource: '*'

  SubnetTagging:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt SubnetTagger.Arn
      ClusterName: !Ref EKSClusterName
      Subnets: !Ref PrivateSubnets
      SecurityGroup: !Ref ClusterSecurityGroupId

Outputs:
  KarpenterStatus:
    Description: Karpenter installation status
    Value: !GetAtt KarpenterInstall.Status