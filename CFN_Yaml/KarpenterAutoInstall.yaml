AWSTemplateFormatVersion: '2010-09-09'
Description: 'Automatically install Karpenter on EKS cluster using Lambda'

Parameters:
  EKSClusterName:
    Type: String
    Description: Name of the EKS cluster
  PrivateSubnets:
    Type: CommaDelimitedList
    Description: Private subnet IDs for Karpenter nodes
  ClusterSecurityGroupId:
    Type: String
    Description: EKS cluster security group ID

Resources:
  # Lambda Layer with kubectl and helm
  KarpenterToolsLayer:
    Type: AWS::Lambda::LayerVersion
    Properties:
      LayerName: !Sub 'karpenter-tools-${EKSClusterName}'
      Description: 'kubectl, helm, and eksctl tools for Karpenter installation'
      Content:
        S3Bucket: !Ref ToolsBucket
        S3Key: 'karpenter-tools.zip'
      CompatibleRuntimes:
        - python3.9

  # S3 bucket for tools
  ToolsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub 'karpenter-tools-${AWS::AccountId}-${AWS::Region}'

  # Lambda function to create tools layer
  CreateToolsLayer:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub 'CreateKarpenterTools-${EKSClusterName}'
      Runtime: python3.9
      Handler: index.handler
      Role: !GetAtt CreateToolsRole.Arn
      Timeout: 600
      Code:
        ZipFile: |
          import boto3
          import cfnresponse
          import subprocess
          import zipfile
          import os
          
          def handler(event, context):
              try:
                  if event['RequestType'] == 'Create':
                      bucket = event['ResourceProperties']['Bucket']
                      
                      # Download tools
                      subprocess.run(['curl', '-LO', 'https://dl.k8s.io/release/v1.28.0/bin/linux/amd64/kubectl'], check=True)
                      subprocess.run(['curl', '-LO', 'https://get.helm.sh/helm-v3.13.0-linux-amd64.tar.gz'], check=True)
                      subprocess.run(['curl', '-LO', 'https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_Linux_amd64.tar.gz'], check=True)
                      
                      # Extract and prepare
                      subprocess.run(['tar', '-xzf', 'helm-v3.13.0-linux-amd64.tar.gz'], check=True)
                      subprocess.run(['tar', '-xzf', 'eksctl_Linux_amd64.tar.gz'], check=True)
                      subprocess.run(['chmod', '+x', 'kubectl', 'linux-amd64/helm', 'eksctl'], check=True)
                      
                      # Create layer zip
                      os.makedirs('bin', exist_ok=True)
                      subprocess.run(['mv', 'kubectl', 'bin/'], check=True)
                      subprocess.run(['mv', 'linux-amd64/helm', 'bin/'], check=True)
                      subprocess.run(['mv', 'eksctl', 'bin/'], check=True)
                      
                      with zipfile.ZipFile('/tmp/karpenter-tools.zip', 'w') as zf:
                          for root, dirs, files in os.walk('bin'):
                              for file in files:
                                  zf.write(os.path.join(root, file))
                      
                      # Upload to S3
                      s3 = boto3.client('s3')
                      s3.upload_file('/tmp/karpenter-tools.zip', bucket, 'karpenter-tools.zip')
                      
                      cfnresponse.send(event, context, cfnresponse.SUCCESS, {'Message': 'Tools uploaded'})
                  else:
                      cfnresponse.send(event, context, cfnresponse.SUCCESS, {'Message': 'No action'})
              except Exception as e:
                  cfnresponse.send(event, context, cfnresponse.FAILED, {'Error': str(e)})

  CreateToolsRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: S3Access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                Resource: !Sub '${ToolsBucket}/*'

  CreateTools:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt CreateToolsLayer.Arn
      Bucket: !Ref ToolsBucket

  # Main Karpenter installer
  KarpenterInstaller:
    Type: AWS::Lambda::Function
    DependsOn: CreateTools
    Properties:
      FunctionName: !Sub 'KarpenterInstaller-${EKSClusterName}'
      Runtime: python3.9
      Handler: index.handler
      Role: !GetAtt KarpenterInstallerRole.Arn
      Timeout: 900
      Layers:
        - !Ref KarpenterToolsLayer
      Environment:
        Variables:
          PATH: '/opt/bin:/usr/local/bin:/usr/bin:/bin'
      Code:
        ZipFile: |
          import boto3
          import json
          import cfnresponse
          import subprocess
          import os
          
          def handler(event, context):
              try:
                  if event['RequestType'] == 'Create':
                      cluster_name = event['ResourceProperties']['ClusterName']
                      subnets = event['ResourceProperties']['Subnets']
                      security_group = event['ResourceProperties']['SecurityGroup']
                      region = event['ResourceProperties']['Region']
                      
                      # Set environment
                      os.environ['PATH'] = '/opt/bin:' + os.environ.get('PATH', '')
                      os.environ['AWS_DEFAULT_REGION'] = region
                      
                      ec2 = boto3.client('ec2')
                      
                      # Tag resources
                      for subnet in subnets:
                          ec2.create_tags(Resources=[subnet], Tags=[{'Key': 'karpenter.sh/discovery', 'Value': cluster_name}])
                      ec2.create_tags(Resources=[security_group], Tags=[{'Key': 'karpenter.sh/discovery', 'Value': cluster_name}])
                      
                      # Update kubeconfig
                      subprocess.run(['aws', 'eks', 'update-kubeconfig', '--name', cluster_name], check=True)
                      
                      # Install Karpenter
                      subprocess.run([
                          'helm', 'upgrade', '--install', 'karpenter',
                          'oci://public.ecr.aws/karpenter/karpenter',
                          '--version', '0.37.0',
                          '--namespace', 'karpenter',
                          '--create-namespace',
                          '--set', f'settings.clusterName={cluster_name}',
                          '--wait'
                      ], check=True)
                      
                      # Apply NodePool
                      nodepool = f'''
apiVersion: karpenter.sh/v1beta1
kind: NodePool
metadata:
  name: default
spec:
  template:
    spec:
      requirements:
        - key: kubernetes.io/arch
          operator: In
          values: ["amd64", "arm64"]
        - key: karpenter.sh/capacity-type
          operator: In
          values: ["spot", "on-demand"]
      nodeClassRef:
        apiVersion: karpenter.k8s.aws/v1beta1
        kind: EC2NodeClass
        name: default
  limits:
    cpu: 1000
---
apiVersion: karpenter.k8s.aws/v1beta1
kind: EC2NodeClass
metadata:
  name: default
spec:
  amiFamily: AL2
  subnetSelectorTerms:
    - tags:
        karpenter.sh/discovery: "{cluster_name}"
  securityGroupSelectorTerms:
    - tags:
        karpenter.sh/discovery: "{cluster_name}"
'''
                      with open('/tmp/nodepool.yaml', 'w') as f:
                          f.write(nodepool)
                      
                      subprocess.run(['kubectl', 'apply', '-f', '/tmp/nodepool.yaml'], check=True)
                      
                      cfnresponse.send(event, context, cfnresponse.SUCCESS, {'Message': 'Karpenter installed successfully'})
                  else:
                      cfnresponse.send(event, context, cfnresponse.SUCCESS, {'Message': 'No action'})
              except Exception as e:
                  print(f"Error: {str(e)}")
                  cfnresponse.send(event, context, cfnresponse.FAILED, {'Error': str(e)})

  KarpenterInstallerRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: KarpenterInstallPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: '*'
                Resource: '*'

  KarpenterInstall:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt KarpenterInstaller.Arn
      ClusterName: !Ref EKSClusterName
      Subnets: !Ref PrivateSubnets
      SecurityGroup: !Ref ClusterSecurityGroupId
      Region: !Ref AWS::Region

Outputs:
  KarpenterStatus:
    Description: Karpenter installation status
    Value: !GetAtt KarpenterInstall.Message